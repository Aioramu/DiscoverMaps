{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["coord","Array","points","console","log","i","length","push","App","href","defaultState","center","zoom","options","preset","groupByCoordinates","map","coordinates","index","geometry","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kMAAe,I,yBCKXA,EAAM,IAAIC,M,UAIVC,EAAO,GACXC,QAAQC,IAAIF,GACZ,IAAK,IAAIG,EAAE,EAAEA,EAAEL,EAAM,GAAN,QAAoBM,OAAOD,IACtCH,EAAOK,KAAK,CAACP,EAAM,GAAN,QAAoBK,GAApB,IAA8BL,EAAM,GAAN,QAAoBK,GAApB,MAC3CF,QAAQC,IAAIF,GAKhBC,QAAQC,IAAIF,EAAO,GAAG,IACtB,IAwBeM,EAxBH,kBAEV,eAAC,IAAD,WACA,mBAAGC,KAAK,mBAAR,4CACE,8BACA,cAAC,IAAD,CACFC,aAAc,CACZC,OAAQ,CAAC,UAAW,WACpBC,KAAM,GAHN,SAKF,cAAC,IAAD,CACEC,QAAS,CACPC,OAAQ,qCACRC,oBAAoB,GAHxB,SAKGb,EAAOc,KAAI,SAACC,EAAaC,GAAd,OACV,cAAC,IAAD,CAAuBC,SAAUF,GAAjBC,gBCvBPE,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.db621b8f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport * as fs from 'fs'\nimport { YMaps, Map,GeoObject, Placemark, Polyline, Rectangle, Polygon, Circle, Clusterer, ObjectManager } from 'react-yandex-maps';\nimport * as coor from \"./coords\";\nvar coord=new Array(coor)\n//coord.push(coor)\n//console.log(coor[0],typeof coor,typeof coord,coord[0]['default'][0])\n//console.log('sooqa',coord[231]['lon'],coord.length)\nvar points=[]\nconsole.log(points)\nfor (var i=0;i<coord[0]['default'].length;i++){\n    points.push([coord[0]['default'][i]['lat'],coord[0]['default'][i]['lon']])\n    console.log(points)\n    //points[i].push(coord[0]['default'][i]['lat'])\n    //points[i].push(coord[0]['default'][i]['lon'])\n  };\n//var points=[[55.751574, 37.573856],[55.758574, 37.573856],[55.765574, 37.573856]]\nconsole.log(points[0][0])\nconst App = () => (\n\n  <YMaps>\n  <a href=\"/usercase/login/\">Войти</a>\n    <div>\n    <Map\n  defaultState={{\n    center: [55.751574, 37.573856],\n    zoom: 5,\n  }}>\n  <Clusterer\n    options={{\n      preset: 'islands#invertedVioletClusterIcons',\n      groupByCoordinates: false,\n    }}>\n    {points.map((coordinates, index) => (\n      <Placemark key={index} geometry={coordinates} />\n    ))}\n  </Clusterer>\n  </Map>\n    </div>\n  </YMaps>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}